$date
	Sun Mar 20 22:41:27 2022
$end
$version
	Icarus Verilog
$end
$timescale
	10ps
$end
$scope module cpu_tb $end
$var reg 1 ! clk $end
$var reg 1 " reset $end
$scope module micpu $end
$var wire 1 ! clk $end
$var wire 16 # direcciones [15:0] $end
$var wire 1 $ oe $end
$var wire 1 " reset $end
$var wire 1 % s_mux_alu $end
$var wire 1 & z $end
$var wire 1 ' wez $end
$var wire 1 ( we3 $end
$var wire 1 ) s_stack_mux $end
$var wire 1 * s_inm $end
$var wire 1 + s_inc $end
$var wire 1 , push $end
$var wire 1 - pop $end
$var wire 6 . opcode [5:0] $end
$var wire 3 / op_alu [2:0] $end
$var wire 16 0 datos [15:0] $end
$scope module camino_datos $end
$var wire 1 1 alu_ffz $end
$var wire 1 ! clk $end
$var wire 16 2 direcciones [15:0] $end
$var wire 1 $ oe $end
$var wire 1 " reset $end
$var wire 1 % s_mux_alu $end
$var wire 1 & z $end
$var wire 1 ' wez $end
$var wire 1 ( we3 $end
$var wire 1 ) s_stack_mux $end
$var wire 1 * s_inm $end
$var wire 1 + s_inc $end
$var wire 1 , push $end
$var wire 1 - pop $end
$var wire 6 3 opcode [5:0] $end
$var wire 3 4 op_alu [2:0] $end
$var wire 32 5 instruccion [31:0] $end
$var wire 16 6 datos [15:0] $end
$var wire 1 7 alu_ffdz $end
$var wire 16 8 Trans_toMux [15:0] $end
$var wire 10 9 SalSum_toMuxStack [9:0] $end
$var wire 10 : SalStack_toMux [9:0] $end
$var wire 10 ; SalPC [9:0] $end
$var wire 10 < SalMux_toMux [9:0] $end
$var wire 16 = SalMux_toALU [15:0] $end
$var wire 16 > SalALU [15:0] $end
$var wire 16 ? R2 [15:0] $end
$var wire 16 @ R1 [15:0] $end
$var wire 10 A Mux_toPC [9:0] $end
$var wire 16 B Mux_Sal_toBR [15:0] $end
$scope module PC $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 10 C d [9:0] $end
$var reg 10 D q [9:0] $end
$upscope $end
$scope module Sumto_multiplexor $end
$var wire 10 E d0 [9:0] $end
$var wire 10 F y [9:0] $end
$var wire 1 + s $end
$var wire 10 G d1 [9:0] $end
$upscope $end
$scope module alu_cpu $end
$var wire 1 7 zero $end
$var wire 16 H y [15:0] $end
$var wire 3 I op_alu [2:0] $end
$var wire 16 J b [15:0] $end
$var wire 16 K a [15:0] $end
$var reg 8 L s [7:0] $end
$upscope $end
$scope module banco_registros $end
$var wire 1 ! clk $end
$var wire 4 M ra1 [3:0] $end
$var wire 4 N ra2 [3:0] $end
$var wire 4 O wa3 [3:0] $end
$var wire 1 ( we3 $end
$var wire 16 P wd3 [15:0] $end
$var wire 16 Q rd2 [15:0] $end
$var wire 16 R rd1 [15:0] $end
$upscope $end
$scope module ffz $end
$var wire 1 ! clk $end
$var wire 1 1 d $end
$var wire 1 " reset $end
$var wire 1 ' carga $end
$var reg 1 & q $end
$upscope $end
$scope module memoria $end
$var wire 10 S a [9:0] $end
$var wire 1 ! clk $end
$var wire 32 T rd [31:0] $end
$upscope $end
$scope module multiplexor_toPC $end
$var wire 10 U d1 [9:0] $end
$var wire 10 V y [9:0] $end
$var wire 1 ) s $end
$var wire 10 W d0 [9:0] $end
$upscope $end
$scope module mux_Inm $end
$var wire 16 X d0 [15:0] $end
$var wire 16 Y y [15:0] $end
$var wire 1 * s $end
$var wire 16 Z d1 [15:0] $end
$upscope $end
$scope module mux_toALU $end
$var wire 16 [ d0 [15:0] $end
$var wire 16 \ d1 [15:0] $end
$var wire 1 % s $end
$var wire 16 ] y [15:0] $end
$upscope $end
$scope module stack $end
$var wire 1 ! clk $end
$var wire 10 ^ out [9:0] $end
$var wire 1 " reset $end
$var wire 1 , push $end
$var wire 1 - pop $end
$var wire 10 _ d [9:0] $end
$var reg 10 ` sp [9:0] $end
$upscope $end
$scope module sumador $end
$var wire 10 a a [9:0] $end
$var wire 10 b b [9:0] $end
$var wire 10 c y [9:0] $end
$upscope $end
$scope module transc $end
$var wire 1 ! clk $end
$var wire 16 d in [15:0] $end
$var wire 1 $ oe $end
$var wire 16 e out [15:0] $end
$var wire 1 " reset $end
$var wire 16 f bidir [15:0] $end
$upscope $end
$upscope $end
$scope module unidad_control $end
$var wire 6 g opcode [5:0] $end
$var wire 1 & z $end
$var reg 3 h op_alu [2:0] $end
$var reg 1 - pop $end
$var reg 1 , push $end
$var reg 1 + s_inc $end
$var reg 1 * s_inm $end
$var reg 1 ) s_stack_mux $end
$var reg 1 ( we3 $end
$var reg 1 ' wez $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module micpu $end
$scope module camino_datos $end
$scope module banco_registros $end
$var reg 8 i \regb[1] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module micpu $end
$scope module camino_datos $end
$scope module banco_registros $end
$var reg 8 j \regb[2] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module micpu $end
$scope module camino_datos $end
$scope module banco_registros $end
$var reg 8 k \regb[3] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 k
b0 j
b0 i
b0 h
b0 g
bx f
bx e
b0 d
b1 c
b0 b
b1 a
b0 `
b1 _
bx ^
b0x000x ]
b0 \
b10001 [
bx Z
bx Y
b0x000x X
bx W
bx V
b1 U
b10001 T
b0 S
b0 R
b0 Q
bx P
b0 O
b0 N
b0 M
b0x000x L
b0x000x K
b0 J
b0 I
b0x000x H
b1 G
b1 F
b10001 E
b0 D
bx C
bx B
bx A
b0 @
b0 ?
b0x000x >
b0x000x =
b1 <
b0 ;
bx :
b1 9
bx 8
x7
bx 6
b10001 5
b0 4
b0 3
bz 2
z1
bx 0
b0 /
b0 .
0-
0,
1+
1*
0)
1(
0'
0&
z%
z$
bz #
1"
1!
$end
#1000
0"
#3000
0!
#6000
b0xxxxxxxx B
b0xxxxxxxx P
b0xxxxxxxx Y
b0xxxxxxxx >
b0xxxxxxxx H
b0xxxxxxxx X
bx L
0(
0*
0+
bx =
bx K
bx ]
b0xxxxxxxx ?
b0xxxxxxxx J
b0xxxxxxxx Q
b0xxxxxxxx @
b0xxxxxxxx R
b0xxxxxxxx \
b0xxxxxxxx d
bx .
bx 3
bx g
bx [
bx O
bx N
bx M
bx E
bx <
bx F
bx U
bx 5
bx T
bx 9
bx G
bx _
bx c
bx ;
bx D
bx S
bx b
1!
#9000
0!
#12000
1!
#15000
0!
#18000
1!
#21000
0!
#24000
1!
#27000
0!
#30000
1!
#33000
0!
#36000
1!
#39000
0!
#42000
1!
#45000
0!
#48000
1!
#51000
0!
#54000
1!
#57000
0!
#60000
1!
#63000
0!
#66000
1!
#69000
0!
#72000
1!
#75000
0!
#78000
1!
#81000
0!
#84000
1!
#87000
0!
#90000
1!
#93000
0!
#96000
1!
#99000
0!
#102000
1!
#105000
0!
#108000
1!
#111000
0!
#114000
1!
#117000
0!
#120000
1!
#123000
0!
#126000
1!
#129000
0!
#132000
1!
#135000
0!
#138000
1!
#141000
0!
#144000
1!
#147000
0!
#150000
1!
#153000
0!
#156000
1!
#159000
0!
#162000
1!
#165000
0!
#168000
1!
#171000
0!
#174000
1!
#177000
0!
#180000
1!
#183000
0!
#186000
1!
#189000
0!
#192000
1!
#195000
0!
#198000
1!
#201000
0!
#204000
1!
#207000
0!
#210000
1!
#213000
0!
#216000
1!
#219000
0!
#222000
1!
#225000
0!
#228000
1!
#231000
0!
#234000
1!
#237000
0!
#240000
1!
#243000
0!
#246000
1!
#249000
0!
#252000
1!
#255000
0!
#258000
1!
#261000
0!
#264000
1!
#267000
0!
#270000
1!
#273000
0!
#276000
1!
#279000
0!
#282000
1!
#285000
0!
#288000
1!
#291000
0!
#294000
1!
#297000
0!
#300000
1!
